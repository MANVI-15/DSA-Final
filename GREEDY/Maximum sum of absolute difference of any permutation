Given an array, we need to find the maximum sum of absolute difference of any permutation of the given array.
Examples: 
 

Input : { 1, 2, 4, 8 }
Output : 18
Explanation : For the given array there are 
several sequence possible
like : {2, 1, 4, 8}
       {4, 2, 1, 8} and some more.
Now, the absolute difference of an array sequence will be
like for this array sequence {1, 2, 4, 8}, the absolute
difference sum is 
= |1-2| + |2-4| + |4-8| + |8-1|
= 14
For the given array, we get the maximum value for
the sequence {1, 8, 2, 4}
= |1-8| + |8-2| + |2-4| + |4-1|
= 18
*********************************************************************************************************
TIME: O(NlogN)
SPACE:O(1)

#include <bits/stdc++.h>
using namespace std;
 
int MaxSumDifference(int a[], int n)
{
    
    vector<int> finalSequence;
 
    for (int i = 0; i < n / 2; ++i) {
        finalSequence.push_back(a[i]);
        finalSequence.push_back(a[n - i - 1]);
    }
 
    if (n % 2 != 0)
        finalSequence.push_back(a[n/2]);
 
   
    int MaximumSum = 0;
    for (int i = 0; i < n - 1; ++i) {
        MaximumSum = MaximumSum + abs(finalSequence[i] -
                                  finalSequence[i + 1]);
    }
 
   
    MaximumSum = MaximumSum + abs(finalSequence[n - 1] -
                                      finalSequence[0]);
 
  
    return MaximumSum;
}