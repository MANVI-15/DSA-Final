Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.
 

Your Task :
Complete the function fractionalKnapsack() that receives maximum capacity , array of structure/class and size n and returns a double value representing the maximum value in knapsack.
Note: The details of structure/class is defined in the comments above the given function.


Expected Time Complexity : O(NlogN)
Expected Auxilliary Space: O(1)


Constraints:
1 <= N <= 105
1 <= W <= 105

/************************************************************************************************************************************************/

TIME: O(NLOGN)
SPACE:O(1)


class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    static bool compare(pair<double,int>&a,pair<double,int>&b)
    {
        return a.first>b.first;
    }
    double fractionalKnapsack(int W, Item arr[], int n)
    {
       vector<pair<double,int>>v;
       
       for(int i=0;i<n;i++)
       {
           v.push_back({(double)arr[i].value/arr[i].weight,arr[i].weight});
       }
       
       sort(v.begin(),v.end(),compare);
       double profit=0;
       
       for(int i=0;i<n;i++)
       {
           //cout<<v[i].second<<" "<<v[i].first<<endl;
           if(v[i].second<=W)
           {
               profit=profit+v[i].first*v[i].second; 
               W-=v[i].second;
           }
           else
           {
               profit=profit+v[i].first*W;
               W=0;
           }
       }
       
       return profit;
    }
        
};