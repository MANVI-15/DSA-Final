Every house in the colony has at most one pipe going into it and at most one pipe going out of it. Tanks and taps are to be installed in a manner such that every house with one outgoing pipe but no incoming pipe gets a tank installed on its roof and every house with only an incoming pipe and no outgoing pipe gets a tap. Find the efficient way for the construction of the network of pipes.


Example 1:

Input:
n = 9, p = 6
a[] = {7,5,4,2,9,3}
b[] = {4,9,6,8,7,1}
d[] = {98,72,10,22,17,66} 
Output: 
3
2 8 22
3 1 66
5 6 10
Explanation:
Connected components are 3->1, 5->9->7->4->6 and 2->8.
Therefore, our answer is 3 followed by 2 8 22, 3 1 66, 5 6 10.
â€‹Your Task:
You don't need to read input or print anything. Your task is to complete the function solve() which takes an integer n(the number of houses), p(the number of pipes),the array a[] , b[] and d[] (where d[i] denoting the diameter of the ith pipe from the house a[i] to house b[i]) as input parameter and returns the array of pairs of tanks and taps installed i.e ith element of the array contains three integers: house number of tank, house number of tap and the minimum diameter of pipe between them.  

Expected Time Complexity: O(n+p)
Expected Auxiliary Space: O(n+p)

Constraints:
1<=n<=20
1<=p<=50
1<=a[i],b[i]<=20
1<=d[i]<=100
*****************************************************************************************************************************************************
TIME:O(N+P)
SPACE:O(N+N+N+N)

class Solution
{
    public:
    int dfs(vector<int>&connect,vector<int>&pipes,int i,int &ans)
    {
        if(connect[i]==0)
        {
            return i;
        }
        if(ans>pipes[i])
        {
            ans=pipes[i];
        }
        
        return dfs(connect,pipes,connect[i],ans);
        
    
    }
    vector<vector<int>> solve(int n,int p,vector<int> a,vector<int> b,vector<int> d)
    {
        vector<int>incoming(n+1,0);
        vector<int>pipes(n+1,0);
        vector<int>connect(n+1,0);
        
        for(int i=0;i<(int)a.size();i++)
        {
            incoming[b[i]]++;
            pipes[a[i]]=d[i];
            connect[a[i]]=b[i];
        }
        
        vector<vector<int>>v;
        int cnt=0;
        
        for(int i=1;i<=n;i++)
        {
            if(incoming[i]==0 && connect[i]!=0)
            {
                int temp=INT_MAX;
                int j=dfs(connect,pipes,i,temp);
                
                cnt++;
                
                vector<int>ans;
                
                //cout<<i<<endl;
                
                ans.push_back(i);
                ans.push_back(j);
                ans.push_back(temp);
                
                v.push_back(ans);
            }
        }
        
        vector<vector<int>>v1;
        vector<int>t;
        t.push_back(cnt);
        v1.push_back(t);
        for(int i=0;i<v.size();i++)
        {
            v1.push_back(v[i]);
            
        }
        
        return v;
    }
};