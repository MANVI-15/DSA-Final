You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
*************************************************************************************************************************************

TIME: O(N^2)
SPACE:O(n^2)


class Solution {
public:
    void dfs(int i,int j,vector<vector<int>>&grid,map<pair<int,int>,bool>&visited,int &cnt,int &index)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || visited[{i,j}]==true || grid[i][j]==0)
        {
           
            return ;
        }
        
        visited[{i,j}]=true;
        grid[i][j]=index;
        cnt++;
        dfs(i+1,j,grid,visited,cnt,index);
        dfs(i,j+1,grid,visited,cnt,index);
        dfs(i-1,j,grid,visited,cnt,index);
        dfs(i,j-1,grid,visited,cnt,index);
        
        return ;
    }
    int largestIsland(vector<vector<int>>& grid) 
    {
        int n=(int)grid.size();
        int m=(int)grid[0].size();
        int ans=0;
       
        map<pair<int,int>,bool>visited;
        unordered_map<int,int>area;
        int index=2;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int cnt=0;
                if(visited[{i,j}]==false)
                {
                    if(grid[i][j]==1)
                    {
                        
                        dfs(i,j,grid,visited,cnt,index);
                        area[index]=cnt;
                        index++;
                    }
                  
                    ans=max(ans,cnt);
                }
            }
        }
        for(int i=0;i<n;i++)
        {
            
            for(int j=0;j<m;j++)
            {
                int temp=0;
                    set<int>s;
                    if(grid[i][j]==0)
                    {
                        cout<<1;
                        temp=1;
                         if((i+1)<n)
                         {
                             temp+=area[grid[i+1][j]];
                             s.insert(grid[i+1][j]);
                         }
                        if((j+1)<m && s.find(grid[i][j+1])==s.end())
                         {
                             temp+=area[grid[i][j+1]];
                            s.insert(grid[i][j+1]);
                         }
                        if((i-1)>=0 && s.find(grid[i-1][j])==s.end())
                         {
                             temp+=area[grid[i-1][j]];
                            s.insert(grid[i-1][j]);
                         }
                        if((j-1)>=0 && s.find(grid[i][j-1])==s.end())
                         {
                             temp+=area[grid[i][j-1]];
                            s.insert(grid[i][j-1]);
                         }
                    }
                   
                    ans=max(ans,temp);
        
            }
        }
        
       
        
        return ans;
        
    }
};