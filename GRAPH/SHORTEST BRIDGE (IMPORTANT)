In a given 2D binary array grid, there are two islands.  (An island is a 4-directionally connected group of 1s not connected to any other 1s.)

Now, we may change 0s to 1s so as to connect the two islands together to form 1 island.

Return the smallest number of 0s that must be flipped.  (It is guaranteed that the answer is at least 1.)

 

Example 1:

Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 

Constraints:

2 <= grid.length == grid[0].length <= 100
grid[i][j] == 0 or grid[i][j] == 1
****************************************************************************************************************************

int dx[]={0,1,-1,0};
int dy[]={1,0,0,-1};
class Solution {
public:
    void dfs(int i,int j,vector<vector<int>>&A,queue<pair<int,int>>&q,map<pair<int,int>,bool>&visited,map<pair<int,int>,int>&dist)
    {
        if(i<0 || j<0 || i>=(int)A.size() || j>=(int)A[0].size() || A[i][j]==0 || visited[{i,j}])
        {
            return;
        }
        
        q.push({i,j});
        visited[{i,j}]=true;
        dist[{i,j}]=0;
        dfs(i+1,j,A,q,visited,dist);
        dfs(i,j+1,A,q,visited,dist);
        dfs(i,j-1,A,q,visited,dist);
        dfs(i-1,j,A,q,visited,dist);
        return;
    }
    bool check(int x,int y,int n,int m)
    {
        if(x<0 || y<0 || x>=n|| y>=m)
        {
            return false;
        }
        return true;
    }
    int bfs(vector<vector<int>>&A,queue<pair<int,int>>&q,map<pair<int,int>,bool>&visited,map<pair<int,int>,int>&dist)
    {
        int n=(int)A.size();
        int m=(int)A[0].size();
   
        
        while(!q.empty())
        {
            auto p=q.front();
            q.pop();
            int i=p.first;
            int j=p.second;
            
            for(int k=0;k<4;k++)
            {
                int x=dx[k]+i;
                int y=dy[k]+j;
                
                if(!visited[{x,y}] && check(x,y,n,m))
                {
                   
                    q.push({x,y});
                    dist[{x,y}]=dist[{i,j}]+1;
                    visited[{x,y}]=true;
                    if(A[x][y]==1)
                    {
                       return dist[{x,y}]-1;
                    }
                }
            }
        }
        
        return -1;
    }
    int shortestBridge(vector<vector<int>>& A) 
    {
        
        queue<pair<int,int>>q;
        map<pair<int,int>,bool>visited;
        map<pair<int,int>,int>dist;
        int f=0;
        for(int i=0;i<(int)A.size();i++)
        {
            if(f)
            {
                break;
            }
            for(int j=0;j<(int)A[0].size();j++)
            {
                if(A[i][j]==1)
                {
                    
                    dfs(i,j,A,q,visited,dist);
                    f=1;
                    break;
                }
            }
            
        }
        
        return bfs(A,q,visited,dist);
    }
};