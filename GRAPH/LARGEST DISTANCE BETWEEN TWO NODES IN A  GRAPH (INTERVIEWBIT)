Problem Description

Given an arbitrary unweighted rooted tree which consists of N nodes.

The goal of the problem is to find largest distance between two nodes in a tree.

Distance between two nodes is a number of edges on a path between the nodes (there will be a unique path between any pair of nodes since it is a tree).

The nodes will be numbered 0 through N - 1.

The tree is given as an array A, there is an edge between nodes A[i] and i (0 <= i < N). Exactly one of the i's will have A[i] equal to -1, it will be root node.



Problem Constraints
1 <= N <= 40000



Input Format
First and only argument is an integer array A of size N.



Output Format
Return a single integer denoting the largest distance between two nodes in a tree.



Example Input
Input 1:

 A = [-1, 0, 0, 0, 3]


Example Output
Output 1:

 3


Example Explanation
Explanation 1:

 node 0 is the root and the whole tree looks like this: 
          0
       /  |  \
      1   2   3
               \
                4

 One of the longest path is 1 -> 0 -> 3 -> 4 and its length is 3, thus the answer is 3.
 **************************************************************************************************************************

 int Solution::solve(vector<int> &A) 
{
    int n=(int)A.size();
    
    if(n==1)
    {
        return 0;
    }
    vector<vector<int>>dp(n,vector<int>(n,INT_MAX));
    int ans=-1;
    
    for(int i=0;i<n;i++)
    {
        dp[i][i]=0;
        if(A[i]!=-1)
        {
           dp[A[i]][i]=-1;
           dp[i][A[i]]=-1;
        }
    }
    
     for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cout<<dp[i][j]<<" ";
        }
        cout<<endl;
    }


   
    for(int k=0;k<n;k++)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(dp[i][k]!=INT_MAX && dp[k][j]!=INT_MAX)
                {
                   
                    dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j]);
                    ans=min(ans,dp[i][j]);
                }
            }
        }
    }
    
   
    
    

  return abs(ans);

}