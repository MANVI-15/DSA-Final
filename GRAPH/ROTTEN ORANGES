You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.
*********************************************************************************************************************************************
TIME: O(N*N*4)

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) 
    {
        int n=(int)grid.size();
        int m=(int)grid[0].size();
        
        queue<pair<int,int>>q;
        map<pair<int,int>,int>dist;
        int cnt=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                    dist[{i,j}]=0;
                }
                else if(grid[i][j]==0)
                {
                    cnt++;
                }
            }
        }
        
         int ans=0;
        
        int dir[4][2]={{0,1},{0,-1},{1,0},{-1,0}};
        
        
        while(!q.empty())
        {
            pair<int,int>k=q.front();
            q.pop();
            
          for(int i=0;i<4;i++)
          {
              int u=k.first+dir[i][0];
              int v=k.second+dir[i][1];
              
              if(u>=0 && v>=0 && u<n && v<m && dist.find({u,v})==dist.end() && grid[u][v]==1)
              {
                  dist[{u,v}]=dist[{k.first,k.second}]+1;
                  ans=max(ans,dist[{u,v}]);
                  q.push({u,v});
              }
              
          }
        }
        
        int t=(int)dist.size();
        
        if(t==(n*m-cnt))
        {
            return ans;
        }
        
        
        return -1;
        
    }
};