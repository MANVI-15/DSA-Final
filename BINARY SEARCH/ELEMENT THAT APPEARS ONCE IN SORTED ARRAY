You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 10^5
0 <= nums[i] <= 10^5
***********************************************************************************************************************************************
class Solution {
public:
    int singleNonDuplicate(vector<int>& a)
    {
        int n=(int)a.size();
        int l=0;
        int r=n-1;
        
        if(n==1)
        {
            return a[0];
        }
        
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            
            if(mid!=0 && mid!=n-1 && a[mid]!=a[mid-1] && a[mid]!=a[mid+1])
            {
                return a[mid];
            }
            if(mid==0 && a[mid]!=a[mid+1])
            {
                return a[mid];
            }
            if(mid==n-1 && a[mid]!=a[mid-1])
            {
                return a[mid];
            }
            if(mid%2!=0)
            {
                if(a[mid]==a[mid+1])
                {
                    r=mid-1;
                }
                else
                {
                   l=mid+1;
                }
            }
            else
            {
                if(a[mid]==a[mid+1])
                {
                    l=mid+1;
                }
                else
                {
                    r=mid-1;
                }
            }
        }
        return -1;
        
    }
};