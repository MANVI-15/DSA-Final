Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kâ€™th position of the final sorted array.
 

Example 1:

Input:
arr1[] = {2, 3, 6, 7, 9}
arr2[] = {1, 4, 8, 10}
k = 5
Output:
6
Explanation:
The final sorted array would be -
1, 2, 3, 4, 6, 7, 8, 9, 10
The 5th element of this array is 6.
Example 2:
Input:
arr1[] = {100, 112, 256, 349, 770}
arr2[] = {72, 86, 113, 119, 265, 445, 892}
k = 7
Output:
256
Explanation:
Final sorted array is - 72, 86, 100, 112,
113, 119, 256, 265, 349, 445, 770, 892
7th element of this array is 256.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function kthElement() which takes the arrays arr1[], arr2[], its size N and M respectively and an integer K as inputs and returns the element at the Kth position.


/**************************************************************************************************************************************************/

TIME:O(Log(min(n,m)))
SPACE: O(1)

class Solution{
    public:
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(m<n)
        {
            kthElement(arr2,arr1,m,n,k);
        }
        
        
        int l=max(0,k-m);//becuase if k=7 n=3 and m=5 if l=0 that means arr2 will be left hand side of cut but there are only  5 elements so it is not posible so we have to consider 2 elements minium from arr1
        int r=min(n,k);//because if k=3 n=4 and m=7 if high=4 that means arr1+highand some eleemtns of arr2 will be left hand side but this is not possible because we need just k=3 elements 
        
        while(l<=r)
        {
          int mid=l+(r-l)/2;
          int cut1=mid;
          int cut2=k-cut1;
          
          int l1=(cut1==0)?INT_MIN:arr1[cut1-1];
          int l2=(cut2==0)?INT_MIN:arr2[cut2-1];
          int r1=(cut1==n)?INT_MAX:arr1[cut1];
          int r2=(cut2==m)?INT_MAX:arr2[cut2];
          
          if(l1<=r2 && l2<=r1)
          {
              return max(l1,l2);
          }
          
          if(l1>r2)
          {
              r=mid-1;
          }
          else
          {
              l=mid+1;
          }
        }
        return -1;
    }
};