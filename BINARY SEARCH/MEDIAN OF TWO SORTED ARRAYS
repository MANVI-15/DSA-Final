Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

/******************************************************************************************************************************************/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) 
    {
        //WE ARE TAKING SMALLER ARRAY FOR BINARY SEARCH ALWAYS BECAUSE THE SIZ WILL ALWAYS BE SMALLER THAN OR EQUAL TO LARGER ARRAY SO IF WE WILL TAKE LARGER ARRAY THEN SIZE-CUT1 CAN BE NEGATIVE ALSO WHICH CAN LEAD TO ERROR//
        if(nums1.size()>nums2.size())
        {
          return findMedianSortedArrays(nums2,nums1); 
        }
        int n1=(int)nums1.size();
        int n2=(int)nums2.size();
        
        int l=0;
        int r=n1;
        int siz=(n1+n2+1)/2;
        
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            
            int cut1=mid;
            int cut2=siz-cut1;
        
            //INT_MIN WHEN WE PICK NO ELEMENTS FROM LEFT SIDE
            //INT_MAX WHEN WE PICK NO ELEMENTS FROM RIGHT SIDE
            int l1=cut1==0?INT_MIN:nums1[cut1-1];
            int l2=cut2==0?INT_MIN:nums2[cut2-1];
            int r1=(cut1)==n1?INT_MAX:nums1[cut1];
            int r2=(cut2)==n2?INT_MAX:nums2[cut2];
            
            
            //CONDITION FOR VALID LEFT AND RIGHT HALF
            if(l1<=r2 && l2<=r1)
             {
                    if((n1+n2)%2!=0)
                    {
                        return max(l1,l2);
                    }
                    else
                    {
                        return (max(l1,l2)+min(r1,r2))/2.0;
                    }
            }
              
            else if(l1>r2)
            {
                r=mid-1;
            }
            else 
            {
                l=mid+1;
            }
        }
        
        return 0.0;
        
    }
};