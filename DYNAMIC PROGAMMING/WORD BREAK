Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
/************************************************************************************************************************************************/

TIME : O(N^2)
SPACE ; O(N)

BRUTE:T(N) = T(N-1) + T(N-2) + ... + T(0)
T(N-1) = T(N-2) + ... + T(0)
T(N) - T(N-1) = T(N-1)
T(N) = 2*T(N-1)
O(2^N)
SPACE: O(N)


class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) 
    {
        unordered_map<string,bool>m;
        
        for(int i=0;i<wordDict.size();i++)
        {
            m[wordDict[i]]=true;
        }
        
        
        int n=(int)s.length();
        vector<bool>dp(n+1,false);
        dp[n]=true;
        
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
                string ans=s.substr(i,j-i+1);
                
                if(m.find(ans)!=m.end())
                {
                      dp[i]=dp[i]||dp[j+1];
                    
                }
            }
        }
        
        return dp[0];
        
    }
};