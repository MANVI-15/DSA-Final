Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".
Example 2:

Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb"
**************************************************************************************************************************************
class Solution {
public:
    int helper(int i,int j,string &s,vector<vector<int>>&dp,int n)
    {
        if(i==j)
        {
            return 1;
        }
        if(i>j)
        {
            return 0;
        }
        if(dp[i][j]!=0)
        {
            return dp[i][j];
        }
        
        int temp=INT_MIN;
        if(s[i]==s[j])
         {
              dp[i][j]=2+helper(i+1,j-1,s,dp,n);
               
         }
         else
         {
           dp[i][j]=max(helper(i,j-1,s,dp,n),helper(i+1,j,s,dp,n));
         }
        
        return dp[i][j];
    }
    int longestPalindromeSubseq(string s)
    {
        int n=(int)s.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<=n;j++)
            {
                if(i>j)
                {
                    dp[i][j]=0;
                }
                else if(i==j)
                {
                    dp[i][j]=1;
                }
                else
                {
                    if(s[i]==s[j])
                    {
                        dp[i][j]=2+dp[i+1][j-1];
                    }
                    else
                    {
                        dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
                    }
                }
                
            }
        }
        
        int i=0;
        int j=n-1;
        
        string ans1="";
        string ans2="";
        while(i<n && j>0)
        {
            if(i>j)
            {
                break;
            }
            if(i==j)
            {
                
                ans1=ans1+s[i];
                break;
            }
            
            else if(s[i]==s[j])
            {
                ans1=ans1+s[i];
                ans2=s[i]+ans2;
                i++;
                j--;
            }
            else
            {
                if(dp[i+1][j]>dp[i][j-1])
                {
                    i++;
                }
                else
                {
                    j--;
                }
            }
        }
        ans1=ans1+ans2;
        cout<<ans1;
       return dp[0][n-1];
    }
};