Implement wildcard pattern matching with support for ‘?’ and ‘*’ for strings A and B.

’?’ : Matches any single character.
‘*’ : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Input Format:

The first argument of input contains a string A.
The second argument of input contains a string B.
Output Format:

Return 0 or 1:
    => 0 : If the patterns do not match.
    => 1 : If the patterns match.
Constraints:

1 <= length(A), length(B) <= 9e4
Examples :

Input 1:
    A = "aa"
    B = "a"

Output 1:
    0

Input 2:
    A = "aa"
    B = "aa"

Output 2:
    1

Input 3:
    A = "aaa"
    B = "aa"

Output 3:
    0
    
Input 4:
    A = "aa"
    B = "*"

Output 4:
    1

Input 5:
    A = "aa"
    B = "a*"

Output 5:
    1

Input 6:
    A = "ab"
    B = "?*"

Output 6:
    1

Input 7:
    A = "aab"
    B = "c*a*b"

Output 7:
    0
*****************************************************************************************************************************************
TIME: O(N*M)
SPACE: O(N*M)

int Solution::isMatch(const string A, const string B) 
{
    int n=(int)A.length();
    int m=(int)B.length();
    
    vector<vector<bool>>dp(n+1,vector<bool>(m+1,false));
    
    for(int i=n;i>=0;i--)
    {
        for(int j=m;j>=0;j--)
        {
            if(i==n && j==m)
            {
                dp[i][j]=true;
            }
            else if(i==n || j==m)
            {
                if(i==n && B[j]=='*')
                {
                  dp[i][j]=dp[i][j+1];
                }
            }
            else if(B[j]=='?')
            {
                dp[i][j]=dp[i+1][j+1];
            }
            else if(A[i]==B[j])
            {
                dp[i][j]=dp[i+1][j+1];
            }
            else if(B[j]=='*')
            {
                
               dp[i][j]=dp[i+1][j]||dp[i][j+1];
                
            }
        }
    }
    return dp[0][0];
}

OPTIMAL:

TIME: O(N*M)
SPACE: O(1)

 bool isMatch(string s, string p) 
 {
        int m=s.length();
        int n=p.length();
        int i=0;
        int j=0;
        int star=-1;
        int last=-1;
        
        while(i<m)
        {
            if(j<n && (p[j]==s[i] || p[j]=='?'))
            {
                i++;
                j++;
            }
            else if(j<n && p[j]=='*')
            {
                j++;
                star=j;
                last=i;
            }
            else if(star!=-1)
            {
                j=star;
                last++;
                i=last;
            }
            else
            {
              return false;
            }
        }
        
        while(j<n && p[j]=='*')
        {
            j++;
        }
        
        return j==n;
    }
}