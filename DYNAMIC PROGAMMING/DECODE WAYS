A message containing letters from A-Z is being encoded to numbers using the following mapping:

 'A' -> 1
 'B' -> 2
 ...
 'Z' -> 26
Given an encoded message A containing digits, determine the total number of ways to decode it modulo 109 + 7.



Problem Constraints
1 <= |A| <= 105



Input Format
The first and the only argument is a string A.



Output Format
Return a single integer denoting the total number of ways to decode it modulo 109 + 7.



Example Input
Input 1:

 A = "8"
Input 2:

 A = "12"


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Given encoded message "8", it could be decoded as only "H" (8).
 The number of ways decoding "8" is 1.
Explanation 2:

 Given encoded message "12", it could be decoded as "AB" (1, 2) or "L" (12).
 The number of ways decoding "12" is 2.


***********************************************************************************************************************************************
TIME: O(N)
SPACE:O(N)

int Solution::numDecodings(string s)
{
    int n=(int)s.length();
    
    vector<int>dp(n+1,0);
    int MOD=1e9+7;
    for(int i=1;i<=n;i++)
    {
        if(i==1)
        {
            if(s[i-1]>='1' && s[i-1]<='9')
           {
              dp[i]=1;
           }
           
        }
        else if(i==2)
        {
            if(s[i-1]>='1' && s[i-1]<='9')
           {
              dp[i]=1;
           }
          
          int num=(s[i-2]-'0')*10+(s[i-1]-'0');
           
           if(num>=10 && num<=26)
           {
               dp[i]+=1;
           }
        }
        else if(i>2)
        {
           if(s[i-1]>='1' && s[i-1]<='9')
           {
              dp[i]=dp[i-1];
           }
           int num=(s[i-2]-'0')*10+(s[i-1]-'0');
           
           if(num>=10 && num<=26)
           {
               dp[i]+=dp[i-2];
           }
        }
        
        if(dp[i]==0)
        {
            return 0;
        }
        
        dp[i]=dp[i]%MOD;
    }
    
    return dp[n];
}
