ked in:  
Microsoft
You are given a set of coins S. In how many ways can you make sum N assuming you have infinite amount of each coin in the set.

Note : Coins in set S will be unique. Expected space complexity of this problem is O(N).

Example :

Input : 
	S = [1, 2, 3] 
	N = 4

Return : 4

Explanation : The 4 possible ways are
{1, 1, 1, 1}
{1, 1, 2}
{2, 2}
{1, 3}
/////////////////////////////////////////////////////////////////////////////////////////////////////////

TIME: O(N*AMOUNT)
SPACE: O(2*AMOUNT)

nt Solution::coinchange2(vector<int> &A, int B) 
{
    int n=(int)A.size();
    int MOD=1000007;
    vector<vector<int>>dp(2,vector<int>(B+1,0));
    
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=B;j++)
        {
            if(i==0 && j==0)
            {
                dp[i%2][j]=1;
            }
            else if(i==0)
            {
                dp[i%2][j]=0;
            }
            else if(j==0)
            {
                dp[i%2][j]=1;
            }
            else if(j>=A[i-1])
            {
                dp[i%2][j]=(dp[(i-1)%2][j]%MOD+dp[i%2][j-A[i-1]]%MOD)%MOD;
            }
            else
            {
                dp[i%2][j]=dp[(i-1)%2][j]%MOD;
            }
        }
    }
    
    return dp[n%2][B]%MOD;
}
