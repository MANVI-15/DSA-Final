Problem Description

Given a 2D integer array A of size M x N, you need to find a path from top left to bottom right which minimizes the sum of all numbers along its path.

NOTE: You can only move either down or right at any point in time.



Input Format
First and only argument is an 2D integer array A of size M x N.



Output Format
Return a single integer denoting the minimum sum of a path from cell (1, 1) to cell (M, N).



Example Input
Input 1:

 A = [  [1, 3, 2]
        [4, 3, 1]
        [5, 6, 1]
     ]


Example Output
Output 1:

 9


Example Explanation
Explanation 1:

 The path is 1 -> 3 -> 2 -> 1 -> 1
 So ( 1 + 3 + 2 + 1 + 1) = 8

 ***************************************************************************************************************************
TIME; O(N*M)
SPACE: O(2*M)

 int Solution::minPathSum(vector<vector<int> > &A) 
{
    int n=(int)A.size();
    int m=(int)A[0].size();
    vector<vector<int>>dp(2,vector<int>(m,0));
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(i==0 && j==0)
            {
                dp[i%2][j]=A[i][j];
            }
            else if(i==0)
            {
                dp[i%2][j]=A[i][j]+dp[i%2][j-1];
            }
            else if(j==0)
            {
                dp[i%2][j]=A[i][j]+dp[(i-1)%2][j];
            }
            else
            {
                dp[i%2][j]=A[i][j]+min(dp[(i-1)%2][j],dp[i%2][j-1]);
            }
            
        }
    }
    
    return dp[(n-1)%2][m-1];
}
