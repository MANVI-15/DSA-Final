Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1
 

Constraints:

1 <= s.length <= 2000
s consists of lower-case English letters only.
************************************************************************************************************************************************

  bool check(string ans)
    {
        int n=(int)ans.length();
        
        for(int i=0;i<=(n/2);i++)
        {
            if(ans[i]!=ans[n-i-1])
            {
                return false;
            }
        }
        
        return true;
    }
    int minCut(string s) 
    {
        int n=(int)s.length();
        
        vector<int>dp(n+1,INT_MAX);
        vector<vector<int>>dp1(n+1,vector<int>(n+1,false));
        
        dp[n]=0;
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=i;j<n;j++)
            {
               
                // DP1 IS USED TO STORE PALINDROME OR NOT BECAUSE WE ARE CHECKING SAME SECTION AGAIN AND AGAIN FOR PALINDROME  ..i...j.... this is very
                important step of optimisation
                
                if(s[i]==s[j] &&  ((j-i)<2  || dp1[i+1][j-1])) 
                {
                    dp1[i][j]=true;
                
                    if(j==n-1)
                    {
                        dp[i]=dp[j+1];
                    }
                    else
                    {
                        dp[i]=min(dp[i],1+dp[j+1]);
                    }
                }
            }
        }
        
        return dp[0];
    }
};