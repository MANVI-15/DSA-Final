Given a string A containing just the characters ’(‘ and ’)’.

Find the length of the longest valid (well-formed) parentheses substring.



Input Format:

The only argument given is string A.
Output Format:

Return the length of the longest valid (well-formed) parentheses substring.
Constraints:

1 <= length(A) <= 750000
For Example

Input 1:
    A = "(()"
Output 1:
    2
    Explanation 1:
        The longest valid parentheses substring is "()", which has length = 2.

Input 2:
    A = ")()())"
Output 2:
    4
    Explanation 2:
        The longest valid parentheses substring is "()()", which has length = 4.

**********************************************************************************************************************************************
TIME: O(N)
SPACE:O(N)

int Solution::longestValidParentheses(string A)
{
    stack<int>s;
    s.push(-1);
    int ans=0;
    int n=(int)A.length();
    int i=0;
    while(i<n)
    {
        if(A[i]=='(')
        {
            s.push(i);
        }
        else if(A[i]==')')
        {
            if(!s.empty() && s.top()!=-1 && A[s.top()]=='(')
            {
                s.pop();
                ans=max(ans,i-s.top());
            }
            else
            {
                s.push(i);
            }
            
        }
        i++;
    }
    
    return ans;
}