Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n). At any instance, 
if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

****************************************************************************************************************************************
TIME; O(N*M)
SPACE: O(2*M)

int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) 
{
    int n=(int)A.size();
    int m=(int)A[0].size();
    vector<vector<int>>dp(2,vector<int>(m,0));
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            if(A[i][j]==1)
            {
                dp[i%2][j]=0;
            }
            else if(i==0 && j==0)
            {
                dp[i%2][j]=1;
            }
            else if(i==0)
            {
                dp[i%2][j]=dp[i%2][j-1];
            }
            else if(j==0)
            {
                dp[i%2][j]=dp[(i-1)%2][j];
            }
            else
            {
                dp[i%2][j]=dp[(i-1)%2][j]+dp[i%2][j-1];
            }
            
        }
    }
    
    return dp[(n-1)%2][m-1];
}
