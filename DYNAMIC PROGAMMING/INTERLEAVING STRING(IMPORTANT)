Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
***************************************************************************************************************************************************

int Solution::isInterleave(string A, string B, string C) 
{
    int n=(int)A.length();
    int m=(int)B.length();
    int len=(int)C.length();
    
    vector<vector<bool>>dp(n+1,vector<bool>(m+1,false));
    
    for(int i=n;i>=0;i--)
    {
        for(int j=m;j>=0;j--)
        {
            if(i==n && j==m)
            {
                dp[i][j]=true;
            }
            else if(i==n)
            {
                if(j!=m && B[j]==C[i+j])
                {
                   dp[i][j]=dp[i][j+1];
                }
                else
                {
                    dp[i][j]=false;
                }
            }
            else if(j==m)
            {
                if(i!=n && A[i]==C[i+j])
                {
                   dp[i][j]=dp[i+1][j];
                }
                else
                {
                    dp[i][j]=false;
                }
            }
            else if(i!=n && j!=m && A[i]==C[i+j] && B[j]==C[i+j])
            {
                dp[i][j]=dp[i+1][j]||dp[i][j+1];
            }
            else if(i!=n && A[i]==C[i+j])
            {
                dp[i][j]=dp[i+1][j];
            }
            else if(j!=m && B[j]==C[i+j])
            {
                dp[i][j]=dp[i][j+1];
            }
        
        }
    }
    
   if(dp[0][0])
   {
       return true;
   }
   
   return false;
    
    
}
