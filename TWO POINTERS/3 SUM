Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

*********************************************************************************************************************************

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end());
        int n=(int)nums.size();
        
        vector<vector<int>>ans;
        
        for(int i=0;i<n;i++)
        {
            if(i!=0 && nums[i]==nums[i-1])
            {
                 continue;
            }
            int sum=0-nums[i];
            int l=i+1;
            int r=n-1;
            
            while(l<r)
            {
                if(nums[l]+nums[r]==sum)
                {
                    vector<int>v(3,0);
                    v[0]=nums[i];
                    v[1]=nums[l];
                    v[2]=nums[r];
                    ans.push_back(v);
                
                    while(l<r && nums[l]==nums[l+1])
                    {
                        l++;
                    }
                    while(r>l && r!=n-1 && nums[r]==nums[r-1])
                    {
                        r--;
                    }
                    
                    l++;
                    r--;
            
                } 
                else if((nums[l]+nums[r])<sum)
                {
                        l++;
                    
                } 
                else
                {
                    r--;
                }
            }
            
        }
        
        return ans;
    }
};