Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
0 <= n <= 3 * 104
0 <= height[i] <= 105

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TIME : O(N)
SPACE : O(1)


class Solution {
public:
    int trap(vector<int>& height) 
    {
        
        
        //BRUTE FORCE 


        PREFIX_MAX: MAXIMUM BUILDING FROM RIGHT SIDE INCLUDING ITSELF 
        SUFFIX_MAX: MAXIMUM BUILDING FROM LEFT SIDE INCLUDING ITSELF
        ANS=ANS+min(PREFIX_MAX,SUFFIX_MAX)-a[i];
        
        TIME: O(3*N);
        SPACE: O(2*N)
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        2ND METHOD OPTIMISED:



        int left=0;
        int right=(int)height.size()-1;
        
        int l_max=0;
        int r_max=0;
        int water=0;


        //HUM L_MAX-A[I]  ISLIYE KAR RAHE KYUNKI H[LEFT]<=H[RIGHT] KA MATLB YEH HAI KI SURELY L_MAX CHOTA HOGA R_MAX SE AUR HUMHARE FORMUAE KI ACCORDING
        HUME HUMSHA MIN(LEFT_MAX,RIGHT_MAX)-A[I] KARNA HOTA HAI ISLIYE HUM CURRENT ELEMENT KO BAS L_MAX SE COMPARE KAR RAHE HAI AGAR CURRENT USSE BADA HUYA TOH TOI KOI
        WATER STORE NHI HOGA WARNA WATER STORE NHI HOGA SIMILARLY RIGHT_MAX KE LIYE BHI YAHI HOGA
        
        while(left<=right)
        {
            if(height[left]<=height[right])
            {
                if(height[left]>=l_max)
                {
                    l_max=height[left];
                }
                else
                {
                    water=water+(l_max-height[left]);
                }
                left++;
            }
            else if(height[left]>height[right])
            {
                if(height[right]>=r_max)
                {
                    r_max=height[right];
                }
                else
                {
                    water=water+(r_max-height[right]);
                }
                 right--;
            }
        }
        return water;
        
    }
};