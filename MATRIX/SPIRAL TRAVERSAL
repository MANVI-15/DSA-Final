Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

************************************************************************************************************************************************
TIME: O(N*M);
SPACE:O(N*M);

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) 
    {
        
        int n=(int)matrix.size();
        int m=(int)matrix[0].size();
        int col_s=0;
        int col_e=m-1;
        int row_s=0;
        int row_e=n-1;
        
        int cnt=0;
        int total=n*m;
        
        vector<int>v;
        
    while(row_s<=row_e && col_s<=col_e)
    {
       for(int i=col_s;i<=col_e && cnt<total;i++)
       {
           v.push_back(matrix[row_s][i]);
           cnt++;
       }
        row_s++;
        
       for(int i=row_s;i<=row_e && cnt<total;i++)
       {
           v.push_back(matrix[i][col_e]);
           cnt++;
       }
        
       col_e--;
        
       for(int i=col_e;i>=col_s && cnt<total;i--)
       {
           v.push_back(matrix[row_e][i]);
           cnt++;
       }
        
       row_e--;
        
       for(int i=row_e;i>=row_s && cnt<total;i--)
       {
         v.push_back(matrix[i][col_s]);
           cnt++;
       }
    
        col_s++;
        
    }
        
        return v;
        
        
    }
};