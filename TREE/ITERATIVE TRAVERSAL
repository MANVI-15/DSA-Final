INORDER TRAVERSAL

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root)
    {
        
        vector<int>ans;
        stack<TreeNode*>q;
        while(root!=NULL || !q.empty())
        {
            while(root!=NULL)
            {
                q.push(root);
                root=root->left;
            }
            
            TreeNode* temp=q.top();
            q.pop();
            ans.push_back(temp->val);
            root=temp->right;
        }
        
        return ans;
    }
};

**************************************************************************************************************************

PEORDER TRAVERSAL

 vector<int> preorderTraversal(TreeNode* root) 
    {
         stack<TreeNode*>s;
        if(root!=NULL)
        {
            s.push(root);
        }
        
        vector<int>ans;
        
        
        
        while(!s.empty())
        {
            auto p=s.top();
            s.pop();
            
            ans.push_back(p->val);
            
            if(p->right!=NULL)
            {
                s.push(p->right);
            }
            if(p->left!=NULL)
            {
                s.push(p->left);
            }
                
        }
        
        
        
        return ans;
    }
};
************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) 
    {
        stack<TreeNode*>s1;
       
        
        vector<int>ans;
        
        if(root!=NULL)
        {
            s1.push(root);
            
        }
        
        while(!s1.empty())
        {
            auto p=s1.top();
            s1.pop();
            
            ans.push_back(p->val);
            
            
             if(p->left!=NULL)
            {
                s1.push(p->left);
                
            }
            
             if(p->right!=NULL)
            {
                s1.push(p->right);
                
            }
           
        }
        
        reverse(ans.begin(),ans.end());
        
        return ans;
        
    }
};
