Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?

**************************************************************************************************************

RECURSIVELY

class Solution {
public:
    bool check(TreeNode* root1,TreeNode* root2)
    {
        if(root1==NULL && root2==NULL)
        {
            return true;
        }
        
        
        if(root1!=NULL && root2!=NULL && root1->val==root2->val
           && check(root1->left,root2->right) && check(root1->right,root2->left))
        {
            
            return true;
        }
            
        
        return false;
    }
    bool isSymmetric(TreeNode* root) 
    {
        if(root==NULL)
        {
            return true;
        }
        
        return (root,root);
        
    }
};

ITERATIVE


 queue<TreeNode*>q;
        
        q.push(root);
        q.push(root);
        
        while(!q.empty())
        {
            TreeNode* temp1=q.front();
            q.pop();
            TreeNode* temp2=q.front();
            q.pop();
            
            if(temp1->val!=temp2->val)
            {
                return false;
            }
            
            if(temp1->left && temp2->right)
            {
                q.push(temp1->left);
                q.push(temp2->right);
            }
            else if(temp1->left || temp2->right)
            {
                return false;
            }
            
            
            if(temp1->right && temp2->left)
            {
                q.push(temp1->right);
                q.push(temp2->left);
            }
            else if(temp1->right || temp2->left)
            {
                return false;
            }
            
            
        }
        
        return true;