Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?

*************************************************************************************************************************************

class Solution {
public:
    void inorder(TreeNode* root,int &k,int &ans)
    {
        if(root==NULL)
        {
            return ;
        }
        
        inorder(root->left,k,ans);
    
        k--;
        if(k==0)
        {
            ans=root->val;
            return;
        }
        
        inorder(root->right,k,ans);
        
        return;
        
    }
    int kthSmallest(TreeNode* root, int k)
    {
        int c=0;
        int ans=-1;
        inorder(root,k,ans);
        return ans;
    }
};


O(1) SPACE

class Solution {
public:
    int kthSmallest(TreeNode* root, int k)
    {
        TreeNode* curr=root;
        TreeNode* pred=root;
        int ans;
         while(curr!=NULL)
        {
          if(curr->left==NULL)
          {
              k=k-1;
              if(k==0)
              {
                ans=curr->val;
              }
              curr=curr->right;
          }
          else
          {
                pred=curr->left;

                while(pred->right!=curr && pred->right!=NULL)
                 {
                      pred=pred->right;
                 }

                 if(pred->right==NULL)
                 {
                    pred->right=curr;
                    curr=curr->left;
                 }
                 else
                {
                         pred->right=NULL;
                         k=k-1;
                         if(k==0)
                         {
                            ans=curr->val;
                         }
                        curr=curr->right;
                }
          }
       }
    return ans;
    
    }
};