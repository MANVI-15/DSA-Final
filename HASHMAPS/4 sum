iven an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 
 *************************************************************************************************************************

 class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& a, int target)
    {
        sort(a.begin(),a.end());
        
        
        int n=(int)a.size();
        
        vector<vector<int>>ans;
        for(int i=0;i<n;i++)
        {
            if(i!=0 && a[i]==a[i-1])
            {
                continue;
            }
            
            for(int j=i+1;j<n;j++)
            {
               int l=j+1;
               int r=n-1;
                
                if(j!=(i+1) && a[j]==a[j-1])
                {
                    continue;
                }
                
               int sum=target-(a[i]+a[j]);
                
               while(l<r)
              {
                  if(a[l]+a[r]==sum)
                  {
                      vector<int>v(4,0);
                      v[0]=a[i];
                      v[1]=a[j];
                      v[2]=a[l];
                      v[3]=a[r];
                      ans.push_back(v);
                      
                      int p=a[l];
                      int k=a[r];
                      l++;
                      r--;
                      
                      while(l<r && p==a[l])
                      {
                          l++;
                      }
                      
                      while(l<r && k==a[r-1])
                      {
                          r--;
                      }
                      
                     
                  }
                  else if(a[l]+a[r]<sum)
                  {
                      l++;
                  }
                  else
                  {
                      r--;
                  }
              }
            }
        }
        
        return ans;
        
    }
};