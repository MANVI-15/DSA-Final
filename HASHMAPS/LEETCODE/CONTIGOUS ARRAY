Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.

/************************************************************************************************/
TIME : O(N)
SPACE: O(N)

class Solution {
public:
    int findMaxLength(vector<int>& nums)
    {
        unordered_map<int,int>m;
        int n=(int)nums.size();
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                nums[i]=-1;
            }
        }
        
        int sum=0;
        int ans=0;
        
        for(int i=0;i<n;i++)
        {
            sum=sum+nums[i];
             if(sum==0)
            {
                ans=max(ans,i+1);
            }
            else
            {
                if(m.find(sum)!=m.end())
                {
                 ans=max(ans,i-m[sum]);
                }
                else
                {
                  m[sum]=i;
                }
            }
            
        }
        
        return ans;
    }
};