TIME COMPLEXITIES :

SEARCH : O(word length);
INSERT: O(word length);
PREFIX SEARCH: o(prefix length)
SPACE: 

*******************************************************************************************************************

class Node
{
    public:
     char data;
    unordered_map<char,Node*>h;
        bool isTerminal=false;
    Node(char ch)
    {
        this->data=ch;
        
    }
        
};
class Trie 
{
    Node* root;
public:
    /** Initialize your data structure here. */
    Trie() 
    {
        
       root=new Node('\0');
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) 
    {
        Node* temp=root;
        
        for(int i=0;i<word.length();i++)
        {
            if(temp->h.find(word[i])!=temp->h.end())
            {
                temp=temp->h[word[i]];
            }
            else
            {
               Node* t=new Node(word[i]);
              temp->h[word[i]]=t;
               temp=t;
            }
        }
        temp->isTerminal=true;
        return ;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word)
    {
        Node* temp=root;
        
        for(int i=0;i<word.length();i++)
        {
            if(temp->h.find(word[i])!=temp->h.end())
            {
                temp=temp->h[word[i]];
            }
            else
            {
               return false;
            }
        }
        return temp->isTerminal;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) 
    {
         Node* temp=root;
        
        for(int i=0;i<prefix.length();i++)
        {
            if(temp->h.find(prefix[i])!=temp->h.end())
            {
                temp=temp->h[prefix[i]];
           }
            else
            {
               return false;
            }
        }
        return true;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */