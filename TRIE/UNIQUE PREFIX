Find shortest unique prefix to represent each word in the list.

Example:

Input: [zebra, dog, duck, dove]
Output: {z, dog, du, dov}
where we can see that
zebra = z
dog = dog
duck = du
dove = dov
 NOTE : Assume that no word is prefix of another. In other words, the representation is always possible. 

 *********************************************************************************************************************************



class Node
{
   public:
   char data;
   int count=0;
   unordered_map<int,Node*>h;
   bool isTerminal=false;
   Node(char ch)
   {
       this->data=ch;
   }

};
class Trie
{
    Node* root;
    public:
    Trie()
    {
        root=new Node('\0');
    }
    void insert(string word)
    {
        Node* temp=root;
        
        for(int i=0;i<word.length();i++)
        {
            if(temp->h.find(word[i])!=temp->h.end())
            {
    
                temp=temp->h[word[i]];
                temp->count++;
                
            }
            else
            {
               Node* t=new Node(word[i]);
               t->count=1;
               temp->h[word[i]]=t;
               temp=t;
            }
        }
        temp->isTerminal=true;
        return ;
        
    } 
    
    string search(string word)
    {
        Node *temp=root;
        string ans="";
        
        for(int i=0;i<word.length();i++)
        {
            
            ans+=word[i];
            
            temp=temp->h[word[i]];
            if(temp->count==1)
            {
                     return ans;
            }
               
            
        }
        
         return ans;
    }
};
vector<string> Solution::prefix(vector<string> &A) 
{
    Trie temp;
    vector<string>ans;
    
    for(int i=0;i<A.size();i++)
    {
        temp.insert(A[i]);   
    }
    for(int i=0;i<A.size();i++)
    {
        ans.push_back(temp.search(A[i]));
    }
    
    return ans;
}
