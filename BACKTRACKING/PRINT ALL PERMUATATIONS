Given a collection of numbers, return all possible permutations.

Example:

[1,2,3] will have the following permutations:

[1,2,3]
[1,3,2]
[2,1,3] 
[2,3,1] 
[3,1,2] 
[3,2,1]
 NOTE
No two entries in the permutation sequence should be the same.
For the purpose of this problem, assume that all the numbers in the collection are unique.

/*******************************************************************************************************************************/


Time Complexity: O(n! * n)
Space Complexity: O(n)

STRING

void permutation(string s,string ans)
{
  if(s.length()==0)
  {
      cout<<ans<<" ";
      return;
  }
  for(int i=0;i<s.length();i++)
  { 
    char ch=s[i];
    string ros=s.substr(0,i)+s.substr(i+1);
    permutation(ros,ans+ch);
  }
}

**********************************************/////***********************//////*************************************
void solve(int s,vector<int>&ans,vector<vector<int>>&res,vector<int>&arr)
{
    if(s>=arr.size())
    {
        res.push_back(ans);
        return;
    }
    
    for(int i=s;i<(int)arr.size();i++)
    {
        int temp=arr[i];
        arr[i]=arr[s];
        arr[s]=temp;
        
        ans.push_back(arr[s]);
        solve(s+1,ans,res,arr);
        ans.pop_back();
        
        temp=arr[i];
        arr[i]=arr[s];
        arr[s]=temp;
    }
    return;
    
}
vector<vector<int> > Solution::permute(vector<int> &A) 
{
    vector<vector<int>>res;
    vector<int>ans;
    solve(0,ans,res,A);
    return res;
}
