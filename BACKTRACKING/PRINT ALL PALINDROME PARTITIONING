Given a string s, partition s such that every string of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["a","a","b"]
    ["aa","b"],
  ]

************************************************************************************************************************************

TIME: O(n^n)
SPACE: O(N)


  bool check(string temp)
{
    int n=(int)temp.length();
   for(int i=0;i<=(n/2);i++)
   {
       if(temp[i]!=temp[n-i-1])
       {
           return false;
       }
   }
    
    return true;
}
void solve(int start,map<string,bool>&m,string &s,vector<string>&ans,vector<vector<string>>&res,int n)
{
    if(start==n)
    {
        res.push_back(ans);
        return;
    }
    
    for(int i=start;i<n;i++)
    {
            string temp=s.substr(start,i-start+1);
            if(m.find(temp)!=m.end() && m[temp]==true)
            {
              ans.push_back(temp);
              solve(i+1,m,s,ans,res,n);
              ans.pop_back();
            }
            else if(m.find(temp)==m.end())
            {
                m[temp]=check(temp);
                if(m[temp]==true)
                {
                   ans.push_back(temp);
                   solve(i+1,m,s,ans,res,n);
                   ans.pop_back();
                }
            }
        
    }
    
    return ;
}
vector<vector<string> > Solution::partition(string A) 
{
    map<string,bool>m;
    vector<string>ans;
    vector<vector<string>>res;
    int n=(int)A.length();
    solve(0,m,A,ans,res,n);
    
    return res;
}
