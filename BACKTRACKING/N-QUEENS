The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

N Queens: Example 1

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens’ placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*****************************************************************************************************************************

TIME: O(n^n)
SPACE:O(N)RECURSIVE

bool safe(int i,int j,vector<vector<int>>&place,int n)
{
    for(int k=0;k<i;k++)
    {
        if(place[k][j]==1)
        {
            return false;
        }
    
    }
    
    int x=i;
    int y=j;
    
    while(x>=0 && y<n)
    {
        if(place[x][y]==1)
        {
            return false;
        }
        x--;
        y++;
    }
    
    x=i;
    y=j;
    
    while(x>=0 && y>=0)
    {
        if(place[x][y]==1)
        {
            return false;
        }
        x--;
        y--;
    }
    
    
    
    return true;
    
    
}
void solve(int i,vector<vector<int>>&place,vector<vector<string>>&res,int n)
{
    if(i==n)
    {
        vector<string>ans;
        for(int i=0; i<n; i++)
        {
            string s="";
            for(int j=0; j<n; j++)
            {
                if(place[i][j]==1) 
                {
                   s.push_back('Q');
                }
                else 
                {
                    s.push_back('.');
                }
            }
            ans.push_back(s);
        }
        res.push_back(ans);
        return ;
    }
    
    for(int j=0;j<n;j++)
    {  
         if(safe(i,j,place,n))
        {
             place[i][j]=1;
              solve(i+1,place,res,n);
              place[i][j]=0;
        }
    }
    return ;
}
vector<vector<string> > Solution::solveNQueens(int A) 
{
    vector<vector<int>>place(A,vector<int>(A,0));
    vector<vector<string>>ans;
    
    solve(0,place,ans,A);
    
    return ans;
}



