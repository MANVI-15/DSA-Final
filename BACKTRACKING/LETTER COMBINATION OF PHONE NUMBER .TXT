Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

*********************************************************************************************************

SPACE: O(N)
TIME; O(3^N)

class Solution {
public:
    void fun(vector<string>&v,int start,map<char,string>&m,string digits,string ans)
    {
       if(start>=(int)digits.size())
       {
           v.push_back(ans);
           return ;
       }
        
        string temp=m[digits[start]];
        ans=ans+'a';
        
        for(int i=0;i<(int)temp.size();i++)
        {
            ans[start]=temp[i];
            fun(v,start+1,m,digits,ans);
        }
        return ;
    }
    vector<string> letterCombinations(string digits) 
    {
        map<char,string>m;
        vector<string>v;
        m['2']="abc";
        m['3']="def";
        m['4']="ghi";
        m['5']="jkl";
        m['6']="mno";
        m['7']="pqrs";
        m['8']="tuv";
        m['9']="wxyz";
        
        if(digits=="")
        {
            return v;
        }
        
        fun(v,0,m,digits,"");
        
        return v;
    }
};