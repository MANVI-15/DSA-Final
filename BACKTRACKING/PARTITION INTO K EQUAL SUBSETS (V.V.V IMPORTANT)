Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4,3,2,3,5,2,1], k = 4
Output: true
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
Example 2:

Input: nums = [1,2,3,4], k = 3
Output: false
 

Constraints:

1 <= k <= nums.length <= 16
1 <= nums[i] <= 104
The frequency of each element is in the range [1, 4]

*********************************************************************************************************************************


class Solution {
public:
    void fun(int start,vector<int>&nums,int temp,int sum,int n,int &ans,vector<bool>&v,vector<bool>&sol)
    {
        if(sum==temp)
        {
           for(int i=0;i<(int)v.size();i++)
           {
               if(sol[i]==true && sol[i]==v[i])
               {
                   return ;
               }
           }
           for(int i=0;i<(int)v.size();i++)
           {
               sol[i]=v[i];
           }
          
            
           ans++;
           return ;
            
        }
        if(start>=n)
        {
            return ;
        }

        
            fun(start+1,nums,temp,sum,n,ans,v,sol);
        
           if(sum+nums[start]<=temp)
           {
             
            v[start]=true;
            fun(start+1,nums,temp,sum+nums[start],n,ans,v,sol);
            v[start]=false;
           }
           
           
        return ;
        
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) 
    {
        int n=(int)nums.size();
        vector<bool>sol(n,false);
        vector<bool>v(n);
        int sum=0;
        int ans=0;
        for(int i=0;i<n;i++)
        {
            sum=sum+nums[i];
        }
        
        if(sum%k!=0)
        {
            return false;
        }
       
        fun(0,nums,sum/k,0,n,ans,v,sol);
        
        if(ans>=k)
        {
            return true;
        }
        return false;
    }
};