Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.' 

You may assume that there will be only one unique solution.
A sudoku puzzle,
and its solution numbers marked in red.

Example :

For the above given diagrams, the corresponding input to your program will be

[[53..7....], [6..195...], [.98....6.], [8...6...3], [4..8.3..1], [7...2...6], [.6....28.], [...419..5], [....8..79]]
and we would expect your program to modify the above array of array of characters to

[[534678912], [672195348], [198342567], [859761423], [426853791], [713924856], [961537284], [287419635], [345286179]]


*********************************************************************************************************************************
Time complexity: O(9^(n*n)). 
For every unassigned index, there are 9 possible options so the time complexity is O(9^(n*n)). The time complexity remains the same but there will be some early pruning so the time taken will be much less than the naive algorithm but the upper bound time complexity remains the same.
Space Complexity: O(n*n). 
To store the output array a matrix is needed.

bool issafe(int row,int col,vector<vector<char>>&A,char val,int n)
{
    int start_x=(row/3)*3;
    int start_y=(col/3)*3;
    
    for(int i=start_x;i<(start_x+3);i++)
    {
        for(int j=start_y;j<(start_y+3);j++)
        {
            if(A[i][j]==val)
            {
                return false;
            }
        }
    }
    
    for(int i=0;i<n;i++)
    {
        if(A[i][col]==val || A[row][i]==val)
        {
            return false;
        }
    }
    
    
    
    return true;
    
}
bool backtrack(int row,int col,vector<vector<char>>&A,int n)
{

    //most important condition
    if(row==n-1 && col==n)
    {
        return true;
    }
    if(col==n)
    {
       return backtrack(row+1,0,A,n);
    }
    
    if(A[row][col]!='.')
    {
        return backtrack(row,col+1,A,n);
    }
    
  
  for(int i=1;i<=9;i++)
  {
      if(issafe(row,col,A,i+'0',n))
      {
          A[row][col]=i+'0';
          if(backtrack(row,col+1,A,n))
          {
             return true;   
          }
          
          A[row][col]='.';
          
      }
  }
    
    return false;
}
void Solution::solveSudoku(vector<vector<char> > &A) 
{
    int n=(int) A.size();
     backtrack(0,0,A,n);
     
}