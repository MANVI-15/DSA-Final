TIME COMPLEXITY:

Insertion: O(logN)
Deletion:  O(logN)
top: o(1)
pop: o(1)

*******************************************************************************

EXPLANATION


HEAP IS COMPLETE BINARY TREE 
COMPLETE BINARY TREE: IT IS A TREE WHOSE ALL LEVELS ARE COMPLETELY FILLED EXCEPT THE LAST ONE AND LAST LEVEL WE CAN INSERT THE NODE ONLY FROM
LEFT TO RIGHT.


TYPES:

MAX-HEAP: When value of parent is greater than both the child
MIN-HEAP: When value of parent is smaller than both child




What is Heap?
It is mainly used to represent a priority queue.
It is represented as a Binary Tree (a tree structure where a node of a tree has a maximum of two child nodes). Heaps are complete binary trees.
A simple array can be used to represent a Heap where array indices refer to the node position in the tree.
Parent and child nodes can be accessed with indices:
A root node｜i = 0, the first item of the array
A parent node｜parent(i) = i / 2
A left child node｜left(i) = 2i
A right child node｜right(i)=2i+1
Two type of Heaps — Min Heap, Max Heap
Min Heap — the parent node always has a smaller value than the child nodes.
Max Heap — the parent node is always larger than the child node value.


BY DEFAULT HEAP IS MAX HEAP IN C++
**********************************************************************************


IMPLEMENTATION:


different questions where HEAP is common data structure to use can be categorized in following 4 categories:

Top K Pattern
Merge K Sorted Pattern
Two Heaps Pattern
Minimum Number Pattern




#include<bits/stdc++.h>
using namespace std;
class heap
{
    bool minheap=true;
    vector<int>v;
    bool compare(int i,int j,int type)
    {
        if(type)
        {
            return i<j;
        }

       return i>j;
    }
    void downheapify(int index)
    {
        int miniindex=index;
        int left=2*index+1;
        int right=2*index+2;

        if(left<v.size() && compare(v[left],v[miniindex],minheap))
        {
            miniindex=left;
        }
        if(right<v.size() && compare(v[right],v[miniindex],minheap)){
            miniindex=right;
        }

        if(miniindex!=index)
        {
            swap(v[miniindex],v[index]);
            downheapify(miniindex);

        }

        return ;
    }
public:
     heap(bool type)
    {
       minheap=type;
    }
    void push(int x)
    {
        v.push_back(x);
        int pos=v.size()-1;
        int parent;

        //upheapify

        if(pos&1)
        {
            parent=(pos-1)/2;
        }
        else
        {
            parent=(pos-2)/2;
        }

        while(pos>0 && compare(v[pos],v[parent],minheap))
        {
            swap(v[parent],v[pos]);
            pos=parent;
            if(pos&1)
            {
               parent=(pos-1)/2;
            }
            else
            {
              parent=(pos-2)/2;
            }
        }
        return ;
    }
    int top()
    {
       return v[0];
    }
    bool empty()
    {
        if(v.empty())
        {
          return 1;
        }
        return 0;
    }
    bool pop()
    {
        int last=v.size()-1;
        swap(v[0],v[last]);
        v.pop_back();
        downheapify(0);
    }
};
int main()
{
    heap h(false);

    int n;
    cin>>n;
    int c;
    for(int i=0;i<n;i++)
    {
        cin>>c;
        h.push(c);
    }

    while(!h.empty())
    {
        cout<<h.top()<<" ";
        h.pop();
    }
}
