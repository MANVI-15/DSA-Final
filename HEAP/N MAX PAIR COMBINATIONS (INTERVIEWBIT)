Problem Description

Given two integers arrays A and B of size N each.

Find the maximum N elements from the sum combinations (Ai + Bj) formed from elements in array A and B.



Problem Constraints
1 <= N <= 2 * 105

-1000 <= A[i], B[i] <= 1000



Input Format
First argument is an integer array A.

Second argument is an integer array B.



Output Format
Return an intger array denoting the N maximum element in descending order.



Example Input
Input 1:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
Input 2:

 A = [2, 4, 1, 1]
 B = [-2, -3, 2, 4]


Example Output
Output 1:

 [10, 9, 9, 8]
Output 2:

 [8, 6, 6, 5]


Example Explanation
Explanation 1:

 4 maximum elements are 10(6+4), 9(6+3), 9(5+4), 8(6+2).
Explanation 2:

 4 maximum elements are 8(4+4), 6(4+2), 6(4+2), 5(4+1).

*********************************************************************************************************************
TIME: O(NlogN)+O(NlogN)
class tup
{
    public:
    int sum=0;
    int idx1=0;
    int idx2=0;
    tup(){}
};
class compare
{
    public:
    bool operator()(tup a,tup b)
    {
       return a.sum<b.sum;   
    }
};

vector<int> Solution::solve(vector<int> &A, vector<int> &B) 
{
  vector<int>ans;
    int n=(int)A.size();
    int m=(int)B.size();
    
    sort(A.begin(),A.end(),greater<int>());
    sort(B.begin(),B.end(),greater<int>());
    
    priority_queue<tup, vector<tup>, compare> pq;
    
    for(int i=0;i<n;i++)
    {
        tup t;
        t.sum=A[i]+B[0];
        t.idx1=i;
        t.idx2=0;
        pq.push(t);
    }
    
    int N=(int)A.size();
    while(N--)
    {
        auto t=pq.top();
        pq.pop();
        
        
        if(t.idx2+1<m)
        {
          tup k;
          k.sum=A[t.idx1]+B[t.idx2+1];
          k.idx1=t.idx1;
          k.idx2=t.idx2+1;
          pq.push(k);
        }
        
        ans.push_back(t.sum);
        
    }
    
    return ans;  
}