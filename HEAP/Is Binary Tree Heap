Given a binary tree you need to check if it follows max heap property or not.

Input:
The task is to complete the method which takes one argument, root of Binary Tree. The struct Node has a data part which stores the data, pointer to left child and pointer to right child.There are multiple test cases. For each test case, this method will be called individually.

Output:
The function should return true if property holds else false.
 

Example 1:

Input:
      5
    /  \
   2    3
Output: 1
Example 2:

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 0
Constraints:
1 ≤ Number of nodes ≤ 100
1 ≤ Data of a node ≤ 1000

/***********************************************************************************************************************************/

 
/* This function counts the 
number of nodes in a binary tree */
unsigned int countNodes(struct Node* root)
{
    if (root == NULL)
        return (0);
    return (1 + countNodes(root->left) 
            + countNodes(root->right));
}
 
/* This function checks if the
binary tree is complete or not */
bool isCompleteUtil (struct Node* root,
                     unsigned int index,
                     unsigned int number_nodes)
{
    // An empty tree is complete
    if (root == NULL)
        return (true);
 
    // If index assigned to 
    // current node is more than
    // number of nodes in tree, 
    // then tree is not complete
    if (index >= number_nodes)
        return (false);
 
    // Recur for left and right subtrees
    return (isCompleteUtil(root->left, 2*index + 1,
                           number_nodes) &&
            isCompleteUtil(root->right, 2*index + 2, 
                           number_nodes));
}
 
// This Function checks the 
// heap property in the tree.
bool isHeapUtil(struct Node* root)
{
    if(tree==NULL)
    {
       return true;
    }
    if(tree->left==NULL && tree->right==NULL)
    {
       return true;
    }
   
    bool left=isHeap(tree->left);
    bool right=isHeap(tree->right);
   
   if(tree->left!=NULL && tree->right!=NULL && left && right)
   {
       if(tree->left->data<tree->data && tree->right->data<tree->data)
       {
           return true;
       }
       
   }
   
   if(tree->left!=NULL && tree->right==NULL && left && right)
   {
       if(tree->left->data<tree->data)
       {
           return true;
       }
      
   }
   
   return false;
}
 
//  Function to check binary
// tree is a Heap or Not.
bool isHeap(struct Node* root)
{
    // These two are used 
    // in isCompleteUtil()
    unsigned int node_count = countNodes(root);
    unsigned int index = 0;
 
    if (isCompleteUtil(root, index,
                       node_count) 
        && isHeapUtil(root))
        return true;
    return false;
}