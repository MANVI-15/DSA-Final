METHOD 1:

MANLO TOPMOST ELEMENT IS HEAP
NEXT ELEMENT KO UPHEAPIFY KARNA HAI JO INSERT KARENGE HEAP MAINTAIN KARNE KE LIYE

TIME COMPLEXITY = 1*0+2*1+4*2...........=2^(H-3)*(H-2)
S=2^(H-1)*[H+(H-1)/2+(H-2)/4+........0]    EQ(1)
2S=2^(H-1)*[2H+(H-1)+(H-2)/2+........0]     EQ(2)

SUBTRACT EQ(1)-EQ(2)
S=2^(H-1)*[2*H+(-1)+(-1/2)+..............]
S=2^H*H
S=O(NlogN)


Method 2
last element matlb leaves manlo agar ek level hota toh single node toh apne aap mein heapify hoti jab nexxt level h-1 add karenge toh neeche wali heap HAI
ab downheapify karenge
TIME: 
TC =2^(h-1)*0+2^(h-2)*1+..............;
S=2^(H-1)[1/2+2/4+3/8+................]
2S=2^(h-1)[1+2/2+3/4+............]

SUBSTRACT S AND 2S

S=2^(H-1)[1+SUM OF GP TENDS TO ZERO+ H/(2^(H-1))]
S=O(2^H)
TC=O(N)

*******************************************************************************************************************************************

METHOD2



// C++ program for building Heap from Array
  
#include <iostream>
  
using namespace std;
  
// To heapify a subtree rooted with node i which is
// an index in arr[]. N is size of heap
void heapify(int arr[], int n, int i)
{
    int largest = i; // Initialize largest as root
    int l = 2 * i + 1; // left = 2*i + 1
    int r = 2 * i + 2; // right = 2*i + 2
  
    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;
  
    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r;
  
    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);
  
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}
  
// Function to build a Max-Heap from the given array
void buildHeap(int arr[], int n)
{
    // Index of last non-leaf node
    int startIdx = (n / 2) - 1;
  
    // Perform reverse level order traversal
    // from last non-leaf node and heapify
    // each node
    for (int i = startIdx; i >= 0; i--) {
        heapify(arr, n, i);
    }
}
  

void printHeap(int arr[], int n)
{
    cout << "Array representation of Heap is:\n";
  
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}
  
// Driver Code
int main()
{
    // Binary Tree Representation
    // of input array
    // 1
    //           /     \
    // 3         5
    //      /    \     /  \
    // 4      6   13  10
    //    / \    / \
    // 9   8  15 17
    int arr[] = { 1, 3, 5, 4, 6, 13, 10, 9, 8, 15, 17 };
  
    int n = sizeof(arr) / sizeof(arr[0]);
  
    buildHeap(arr, n);
  
    printHeap(arr, n);
    // Final Heap:
    // 17
    //           /      \
    // 15         13
    //       /    \      /  \
    // 9      6    5   10
    //     / \    /  \
    // 4   8  3    1
  
    return 0;
}




