You are given a string s. You can convert s to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.

 

Example 1:

Input: s = "aacecaaa"
Output: "aaacecaaa"
Example 2:

Input: s = "abcd"
Output: "dcbabcd"
 

***********************************************************************************************************************
INTUITION:

1. Kmp table at each index stores the longest substring that is prefix also.
2. pat=s+"#+reverse(s) at last index it will store the longest reverse string of s that is prefix also (paindrome is one which is same from front as from reverse)
so we got the longest plaindrome starting at index 0.

ex :  a1a2a3a4a5  reverse=a5a4a3a2a1
if lps[n-1]=3
it means longest substring that is also prefix means a3a2a1=a1a2a3 that is the definition of palindrome also


class Solution {
public:
    string shortestPalindrome(string s)
    {
        
        string l=s;
        
        reverse(l.begin(),l.end());
        
        string pat=s+"$"+l;
        
        int n=(int)pat.length();
        
        vector<int>lps(n,0);
        
        int i=0;
        int j=1;
        
        while(j<n)
        {
            if(pat[i]==pat[j])
            {
                i++;
                lps[j]=i;
                j++;
            }
            else
            {
                if(i==0)
                {
                    lps[j]=0;
                    j++;
                }
                else
                {
                    i=lps[i-1];
                }
            }
        }
        
        //cout<<lps[n-1];
        
        
        string k="";
        string m=s.substr(0,lps[n-1]);
        string temp=s.substr(lps[n-1]);
        k=m+temp;
        
        reverse(temp.begin(),temp.end());
        
        k=temp+k;
        
        return k;
    }