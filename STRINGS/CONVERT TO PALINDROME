Problem Description

Given a string A consisting only of lowercase characters, we need to check whether it is possible to make this string a palindrome after removing exactly one character from this.

If it is possible then return 1 else return 0.



Problem Constraints
3 <= |A| <= 105

A[i] is always a lowercase character.



Input Format
First and only argument is an string A.



Output Format
Return 1 if it is possible to convert A to palindrome by removing exactly one character else return 0.



Example Input
Input 1:

 A = "abcba"
Input 2:

 A = "abecbea"


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 We can remove character ‘c’ to make string palindrome
Explanation 2:

 It is not possible to make this string palindrome just by removing one character 
 *****************************************************************************************************************************

 int Solution::solve(string A) 
{
    int n=(int)A.length();
    int l=0;
    int r=n-1;
    while(l<=r)
    {
        if(A[l]==A[r])
        {
            l++;
            r--;
        }
        else
        {
            break;
        }
    }
    
    
    if(l>r)
    {
        return 1;
    }
    //remove left character
    
    int left=l+1;
    int right=r-1;
    while(left<=r)
    {
        if(A[left]==A[r])
        {
            left++;
            r--;
        }
        else
        {
            break;
        }
    }
    
    if(left>r)
    {
        return 1;
    }
    
    //remove right character
    while(l<=right)
    {
       if(A[l]==A[right])
       {
           l++;
           right--;
       }
       else
       {
           break;
       }
    }
    
    
    if(l>right)
    {
        return 1;
    }
    
    return 0;
}
