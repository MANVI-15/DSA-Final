Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30
**********************************************************************************************************************

class Solution {
public:
    
    vector<vector<int>> generate(int numRows) 
    {
        vector<vector<int>>v;
        
         for(int i=0;i<numRows;i++)
         {
             vector<int>temp(i+1);
             v.push_back(temp);
             v[i][0]=v[i][i]=1;
             
             for(int j=1;j<i;j++)
             {
                 v[i][j]=v[i-1][j]+v[i-1][j-1];
             }
             
            
         }
        
        return v;
    }
};

/************************************************************************************************************/

GIVEN R,C AND WE HAVE TO FIND THE NUMBER IN PASCAL TRIANGLE  FORMULAE: nCr  n=R-1,r=C-1 TIME: O(N)  SPACE: O(1)

GIVEN R WE HAVE TO FIND THE WHOLE ROW IN PASCAL TRIANGLE  
Logic: if we will find nCr again and again for every column then complexity will be  o(n^2) to avoid this there is  a trick;


int res=1;
vector<int>ans;
ans.push_back(1);
row=row-1;

for(int i=0;i<row;i++)
{
             res*=(n-i);
             res/=(i+1);
             ans.push_back(res);
}


time: o(n)
space:o(n)
