Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1

***********************************************************************************************************
TIME: O(NLOGN)+O(N)+O(N)
SPACE: O(N)
class Solution {
public:
    int merge(int low,int high,int mid,vector<int>&nums)
    {
        vector<int>temp;
        int inv=0;
         int j=mid+1;
        int c=0;
        
        for(int i=low;i<=mid;i++)
        {
            while(j<=high && ceil((double)nums[i])/2>nums[j])
            {
                
                j++;
            }
            
            inv=inv+(j-(mid+1));
        }
        
        int i=low;
        j=mid+1;
        while(i<=mid && j<=high)
        {
            if(nums[i]<nums[j])
            {
                temp.push_back(nums[i++]);
            }
            else
            {
                temp.push_back(nums[j++]);
            }
        }
        
        while(i<=mid)
        {
             temp.push_back(nums[i++]);
        }
        
        while(j<=high)
        {
             temp.push_back(nums[j++]);
        }
        
        c=0;
        
        for(int i=low;i<=high;i++)
        {
            nums[i]=temp[c];
            c++;
        }
        
        return inv;
    }
    int merge_sort(int start,int end,vector<int>&nums)
    {
        if(start>=end)
        {
            return 0;
        }
        
      
        int mid=start+(end-start)/2;
        
        int left=merge_sort(start,mid,nums);
        int right=merge_sort(mid+1,end,nums);
        int inv=left+right+merge(start,end,mid,nums);
        
        return inv;
    }
    int reversePairs(vector<int>& nums) 
    {
        int n=(int)nums.size();
        return merge_sort(0,n-1,nums);   
    }
};