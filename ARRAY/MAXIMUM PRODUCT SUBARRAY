Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

/*****************************************************************************************************************************************************/
TIME COMPLEXITY: O(N)
SPACE COMPEXITY: O(1)

class Solution {
public:
    int maxProduct(vector<int>& nums)
    {
        int l=1;
        int r=1;
        int ans=INT_MIN;
        int n=(int)nums.size();
        
        for(int i=0;i<n;i++)
        {
            if(l==0)
            {
                l=nums[i];
            }
            else
            {
                l=l*nums[i];
            }
            if(r==0)
            {
                r=nums[n-i-1];
            }
            else
            {
                r=r*nums[n-i-1];
            }
            
            ans=max({ans,l,r});
        }
        
        return ans;
        
    }
};