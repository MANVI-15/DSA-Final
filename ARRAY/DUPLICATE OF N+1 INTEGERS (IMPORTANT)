Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1
Example 4:

Input: nums = [1,1,2]
Output: 1
 

Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

 **********************************************************************************************************************

 APPROACH:

 1. Since there is only  number which is duplicate so when we create linked list there will definitely be a ring which we 
 meet at the number which is duplicate.(kyunki saarenumbers agar n size ke array hai toh (1,n-1) range mein hinge and suppose n=4 hai and slow and fast travel KeyboardInterrupthue 3 
 different values par visit kaliya then pakke se given hai ek value repeated hogi toh ab jis vaue par  jayenge woh repeted walihogi toh ring 
 form hojayegi)
 2. we will follow the method of linked list to find where cycle intersect.


 class Solution {
public:
    int findDuplicate(vector<int>& nums)
    {
        int fast=nums[0];
        int slow=nums[0];
        
       do
        {
            fast=nums[nums[fast]];
            slow=nums[slow];
        }while(fast!=slow);
        
        fast=nums[0];
        
        while(fast!=slow)
        {
            fast=nums[fast];
            slow=nums[slow];
        }
        
        return slow;
    }
};