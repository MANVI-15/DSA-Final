Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's, and return the matrix.

You must do it in place.

 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 

Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
**************************************************************************************************************

TIME: O(N*M+N*M)
SPACE:O(1)


/*we are not using any extra space we are using 0th row and 0th column to check that whether we have to mark that corresponding 
row and col element to zero or not*/


int r=(int)matrix.size();
        int c=(int)matrix[0].size();
        
        //we are using this to keep check that whether we have to change the 0th column element  to 0 or not because matrix[0][0] will be same
        for both 0th row and 0th column so it can lead to confusion that 's why//
        int col=1;
       
        for(int i=0;i<r;i++)
        {
            if(matrix[i][0]==0)
            {   
                col=0;
            }
            for(int j=1;j<c;j++)
            {
                if(matrix[i][j]==0)
                {
                    matrix[i][0]=0;
                    matrix[0][j]=0;
                }
            }
        }
        /*we are starting from back because a[0][0] will depend on both 0 column and row and at 
        last it will be changed so it will not effect the 0th row element if it is changed because of the  0th column*/
        
        for(int i=r-1;i>=0;i--)
        {
            for(int j=c-1;j>=1;j--)
            {
                if(matrix[i][0]==0 || matrix[0][j]==0)
                {
                    matrix[i][j]=0;
                }
                if(col==0)
                {
                    matrix[i][0]=0;
                }
            }
        }
        
    }
};