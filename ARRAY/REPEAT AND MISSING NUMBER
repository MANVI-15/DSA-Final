Find Missing And Repeating 
Medium Accuracy: 37.77% Submissions: 68610 Points: 4
Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2, …N} is missing and one number 'B' occurs twice in array. Find these two numbers.

Example 1:

Input:
N = 2
Arr[] = {2, 2}
Output: 2 1
Explanation: Repeating number is 2 and 
smallest positive missing number is 1.
Example 2:

Input:
N = 3
Arr[] = {1, 3, 3}
Output: 3 2
Explanation: Repeating number is 3 and 
smallest positive missing number is 2.
Your Task:
You don't need to read input or print anything. Your task is to complete the function findTwoElement() which takes the array of integers arr and n as parameters and returns an array of integers of size 2 denoting the answer ( The first index contains B and second index contains A.)

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 105
1 ≤ Arr[i] ≤ N

***************************************************************************************************

class Solution{
public:
  int solve(int n)
  {
      int ans=1;
      while(n>0)
      {
          if(n&1)
          {
              return ans;
          }
          n=n>>1;
          ans++;
      }
      
      return ans;
  }
    int *findTwoElement(int *arr, int n)
    {
       int xo=0;
       
       for(int i=1;i<=n;i++)
       {
         xo=xo^i^arr[i-1];
       }
       
       
       int last=solve(xo);
       //cout<<last<<endl;
       
    
       int second=0;
       int first=0;
       
       for(int i=1;i<=n;i++)
       {
           int bit=i;
           bit=bit>>(last-1);
           
           if(bit&1)
           {
               first=first^i;
           }
           else
           {
               second=second^i;
           }
       }
       
       for(int i=0;i<n;i++)
       {
           int bit=arr[i];
           bit=bit>>(last-1);
           
           if(bit&1)
           {
               first=first^arr[i];
           }
           else
           {
               second=second^arr[i];
           }
       }
       
       
       int *a=new int[2];
       int f=1;
       
       for(int i=0;i<n;i++)
       {
           if(first==arr[i])
           {
               f=0;
               break;
           }
       }
       
       if(f==0)
       {
           a[0]=first;
           a[1]=second;
           return a;
       }
       
       a[0]=second;
       a[1]=first;
       
       return a;
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findTwoElement(a, n);
        cout << ans[0] << " " << ans[1] << "\n";
    }
    return 0;
}  // } Driver Code Ends