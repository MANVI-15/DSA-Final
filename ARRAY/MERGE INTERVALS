Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

class Solution {
public:
    static bool compare(pair<int,int>&a,pair<int,int>&b)
    {
        return a.first<b.first;
    }
    vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        
        vector<pair<int,int>>v;
        int n=(int)intervals.size();
         vector<vector<int>>ans;
        
        if(n==0)
        {
         return ans;   
        }
        
        for(int i=0;i<n;i++)
        {
            v.push_back({intervals[i][0],intervals[i][1]});
        }
        
        sort(v.begin(),v.end(),compare);
        
       
        
        pair<int,int>p=v[0];
        
        for(int i=1;i<n;i++)
        {
            cout<<p.first<<" "<<p.second<<endl;
            if(v[i].first>p.second)
            {
                vector<int>k;
                k.push_back(p.first);
                k.push_back(p.second);
                ans.push_back(k);
                p=v[i];
            }
            else
            {
                if(v[i].second>p.second)
                {
                    p.second=v[i].second;
                }
            }
        }
        
         vector<int>k;
         k.push_back(p.first);
         k.push_back(p.second);
         ans.push_back(k);
        
        return ans;
        
    }
};

TIME COMPLEXITY: O(N)
SPACE : O(1)