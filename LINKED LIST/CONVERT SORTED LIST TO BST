Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

A height balanced BST : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example :


Given A : 1 -> 2 -> 3
A height balanced BST  :

      2
    /   \
   1     3

**********************************************************************
TreeNode* solve(ListNode* head)
{
    if(head==NULL)
    {
        return NULL;
    }
    if(head->next==NULL)
    {
       TreeNode* root=new TreeNode(head->val);
       return root;
    }
    ListNode* fast=head;
    ListNode* slow=head;
    ListNode* prev=NULL;
    while(fast!=NULL &&  fast->next!=NULL)
    {
        prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
    
    ListNode* right=slow->next;
    prev->next=NULL;
    TreeNode* root=new TreeNode(slow->val);
    root->left=solve(head);
    root->right=solve(right);

    return root;
}
TreeNode* Solution::sortedListToBST(ListNode* A)
{
    return solve(A);
   
}
