Given the head of a singly linked list, return true if it is a palindrome.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9
***********************************************************************************************************************************
TIME: O(3*N)
SPACE:0(1)

class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr=head;
        ListNode* prev=NULL;
        
        while(curr!=NULL)
        {
            ListNode* temp=curr->next;
            curr->next=prev;
            prev=curr;
            curr=temp;
        }
        head=prev;
        return head;
    }
    bool isPalindrome(ListNode* head)
    {
        
        ListNode* slow=head;
        ListNode* fast=head;
        
        while(fast!=NULL && fast->next!=NULL)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        
        if(fast)
        {
            slow=reverse(slow->next);
        }
        else
        {
            slow=reverse(slow);
        }
        
        while(slow!=NULL)
        {
            if(head->val!=slow->val)
            {
                return false;
            }
            slow=slow->next;
            head=head->next;
        }
        
        return true;
    }
};