Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.

**********************************************************************************************************************************
TIME:O(N)
SPACE:O(1)


 ListNode* mergeTwoLists(ListNode* temp1, ListNode* temp2) 
    {
      if(temp1==NULL || temp2==NULL)
      {
          if(temp1==NULL)
          {
              return temp2;
          }
          else
          {
              return temp1;
          }
      }
        
      
        if(temp1->val>temp2->val)
        {
            swap(temp1,temp2);
        }
        
        ListNode* prev;
        ListNode* start=temp1;
        
        
       while(temp1!=NULL && temp2!=NULL)
       {
           
               while(temp1!=NULL && temp1->val<=temp2->val)
               {
                 prev=temp1;  
                 temp1=temp1->next;
               }
               
               prev->next=temp2;
               swap(temp1,temp2);
           
          
       }
        
        return start;
        
    }
};

