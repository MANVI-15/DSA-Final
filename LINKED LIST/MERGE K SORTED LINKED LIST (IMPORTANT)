Given K sorted linked lists of different sizes. The task is to merge them in such a way that after merging they will be a single sorted linked list.

Example 1:

Input:
K = 4
value = {{1,2,3},{4 5},{5 6},{7,8}}
Output: 1 2 3 4 5 5 6 7 8
Explanation:
The test case has 4 sorted linked 
list of size 3, 2, 2, 2
1st    list     1 -> 2-> 3
2nd   list      4->5
3rd    list      5->6
4th    list      7->8
The merged list will be
1->2->3->4->5->5->6->7->8.
Example 2:

Input:
K = 3
value = {{1,3},{4,5,6},{8}}
Output: 1 3 4 5 6 8
Explanation:
The test case has 3 sorted linked
list of size 2, 3, 1.
1st list 1 -> 3
2nd list 4 -> 5 -> 6
3rd list 8
The merged list will be
1->3->4->5->6->8.
Your Task:
The task is to complete the function mergeKList() which merges the K given lists into a sorted one. The printing is done automatically by the driver code.

Expected Time Complexity: O(nk Logk)
Expected Auxiliary Space: O(k)
Note: n is the maximum size of all the k link list

Constraints
1 <= K <= 103

***********************************************************************************************************************************

class compare
{
    public:
    bool operator()(pair<int,Node*>&p,pair<int,Node*>&q)
    {
       return p.first>q.first;   
    }
};

class Solution{
  public:
    Node* merge(Node *a,Node *b)
    {
        if(a->data>b->data)
        {
            swap(a,b);
        }
        
        Node* temp1=a;
        Node* temp2=b;
        Node* prev=NULL;
        
        while(temp1!=NULL && temp2!=NULL)
        {
            while(temp1!=NULL && temp1->data<=temp2->data)
            { 
                prev=temp1;
                temp1=temp1->next;
            }
            
            prev->next=temp2;
            swap(temp1,temp2);
        }
        
        return a;
    }
    Node * mergeKLists(Node *arr[], int K)
    {
        int last=K-1;
         while(last!=0)
         {
             int i=0;
             int j=last;
             while(i<j)
             {
                 arr[i]=merge(arr[i],arr[j]);
                
                i++;
                j--;
                if(i>=j)
                {
                    last=j;
                }
               
             }
         }
         return arr[0];
    }
          
          
    
};
