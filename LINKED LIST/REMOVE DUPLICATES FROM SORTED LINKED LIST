Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
*********************************************************************************************************************************

TIME:O(N)
SPACE:O(1)


class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head)
    {
       ListNode* temp=head;
        
        while(temp!=NULL)
        {
            ListNode* temp1=temp;
            int val=temp->val;
            while(temp1!=NULL && val==temp1->val)
            {
                temp1=temp1->next;
            }
            
            
        
            temp->next=temp1;
            temp=temp->next;
        }
        
        return head;
    }
};
