Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
Example 3:

Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]
Example 4:

Input: head = [1], k = 1
Output: [1]
 

Constraints:

The number of nodes in the list is in the range sz.
1 <= sz <= 5000
0 <= Node.val <= 1000
1 <= k <= sz
*****************************************************************************************************************

ListNode* reverseKGroup(ListNode* head, int k) 
    {
        ListNode* temp=head;
        ListNode*prev;
        ListNode *tail=new ListNode(0);
        tail->next=head;
        head=tail;
        while(temp!=NULL)
        {
            int i=0;
            while(temp!=NULL && i<(k-1))
            {
                temp=temp->next;
                i++;
            }
            if(i==k-1 && temp!=NULL)
            {
                ListNode* curr=tail->next;
                prev=temp->next;
                ListNode* c=prev;
                ListNode* k=tail->next;
                
                while(curr!=c)
                {
                    ListNode* t=curr->next;
                    curr->next=prev;
                    prev=curr;
                    curr=t;
                }
              
               
                tail->next=prev;
                tail=k;
                temp=curr;
                
            }
            else
            {
                break;
            }
        }
        
        return head->next;
    }
