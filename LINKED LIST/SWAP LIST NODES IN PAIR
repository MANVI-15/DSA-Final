Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

***********************************************************************************************************************


ListNode* swap(ListNode* temp1,ListNode* temp2)
{
    
    temp1->next=temp2->next;
    temp2->next=temp1;
    
    return temp2;
}
ListNode* Solution::swapPairs(ListNode* A)
{
    ListNode* start=new ListNode(0);
    start->next=A;
    
    ListNode* curr=start;
    
    while(curr && curr->next && curr->next->next)
    {
       curr->next=swap(curr->next,curr->next->next);
       curr=curr->next->next;
    }
    
    
    return start->next;
}