class Node
{
    public:
    int key;
    int value;
    Node* next;
    Node(int key,int value)
    {
        this->key=key;
        this->value=value;
        next=NULL;
    }
};
class MyHashMap {
public:
    int maxsize;
    int currsize;
    Node** bucket;
    MyHashMap() {
        this->currsize=0;
        this->maxsize=100000;
        this->bucket=new Node*[100000];
        
        for(int i=0;i<maxsize;i++)
        {
            bucket[i]=NULL;
        }
    }
    int hash(int key)
    {
        int idx=key%this->maxsize;
        return idx;
    }
    
    void rehash()
    {
          Node **temp=this->bucket;
          int oldsize=this->maxsize;
          this->maxsize=2*(this->maxsize);
          this->bucket=new Node*[maxsize];
          for(int i=0;i<maxsize;i++)
          {
             bucket[i]=NULL;
          }
        
         for(int i=0;i<oldsize;i++)
         {
             Node* t=temp[i];
             
             while(t!=NULL)
             {
                 put(t->key,t->value);
                 t=t->next;
             }
         }
        return ;
    }
    /** value will always be non-negative. */
    void put(int key, int value) 
    {
        double lambda=currsize/maxsize;
        if(lambda>0.5)
        {
            rehash();
        }
        
        
        int idx=hash(key);
        
        Node* t=bucket[idx];
        while(t!=NULL)
        {
            if(t->key==key)
            {
                t->value=value;
                return;
            }
            t=t->next;
        }
        
        Node *n=new Node(key,value);
        n->next=bucket[idx];
        bucket[idx]=n;
        currsize++;
        
        return;
        
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    int get(int key)
    {
       int idx=hash(key);
       Node* n=bucket[idx];
        
        while(n!=NULL)
        {
            if(n->key==key)
            {
                return n->value;
            }
            n=n->next;
        }
        return -1;
        
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    void remove(int key) 
    {
        int idx=hash(key);
        Node* n=bucket[idx];
        
        if(n==NULL)
        {
            return ;
        }
        if(n->key==key)
        {
            bucket[idx]=n->next;
            return;
        }
        
        while(n!=NULL && n->next!=NULL)
        {
            if(n->next->key==key)
            {
                break;
            }
        }
        
        if(n==NULL || n->next==NULL)
        {
            return ;
        }
        
        Node* temp=n->next;
        n->next=n->next->next;
        temp->next=NULL;
        
        delete temp;
        return ;
    }
};