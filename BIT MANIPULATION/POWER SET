Given a string S find all possible substrings of the string in lexicographically-sorted order.

Example 1:

Input : str = "abc"
Output: a ab abc ac b bc câ€‹
Explanation : There are 7 substrings that 
can be formed from abc.
Example 2:

Input: str = "aa"
Output: a a aa
Explanation : There are 3 substrings that 
can be formed from aa.
Your Task:
You don't need to read ot print anything. Your task is to complete the function AllPossibleStrings() which takes S as input parameter and returns a list of all possible substrings(non-empty) that can be formed from S in lexicographically-sorted order.
 

Expected Time Complexity: O(2n) where n is the length of the string
Expected Space Complexity : O(n * 2n)
 

Constraints: 
1 <= Length of string <= 16
************************************************************************************************************************

TIME: 2^n
SPACE: N*(2^N)

class Solution{
	public:
		vector<string> AllPossibleStrings(string s)
		{
		    int n=(int)s.length();
		    
		    int p=pow(2,n);
		    
		    vector<string>v;
		    string ans="";
		    
		    for(int i=0;i<p;i++)
		    {
		       ans="";
		       for(int j=0;j<n;j++)
		       {
                   //FOR EACH CHARACTER WE SET ONE BIT EXAPMLE 'ABC' : A=1,B=10,C=100 and when we take end with i and if that bit is set in both i and representation of 'abc' 
                   that means we have to consider that character.
		           if(i&(1<<j))   
		           {
		               ans=ans+s[j];
		           }
		           
		        
		       }
		       
		       if(ans!="")
		       {
		          v.push_back(ans);
		       }
		    }
		    
		    sort(v.begin(),v.end()); ///TO GET LEXICOGRAPHIC OUTPUT
		    
		    
		    return v;
		}
};