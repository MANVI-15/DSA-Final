Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every
element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search 
circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.
Example 2:

Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]
 

Constraints:

1 <= nums.length <= 104
-109 <= nums[i] <= 109

***************************************************************************************************************************

vector<int> nextGreaterElements(vector<int>& nums)
    {
     
         int n=(int)nums.size();
         vector<int>ans(n,0);
         stack<int>s;


         /*JUST COPY THE SAME ARRAY TWICE BECAUSE AT A GIVEN  POSITION IN CIRCULAR IF WE ARE STANDING WE HAVE TO CONSIDER ALL ELLMENTS EXCEPT THAT ELEMENT TO 
         FIND NEXT FREATER ELEMENT FRO THAT POSITION EX: 12,1,10  THEN FOR 1 WE HAVE TO CONSIDER 10,12 SIMILRY IF WE WILL COPY THE ARRAY TWICE 12,1,10,12,1,10 WE 
         WILL GET SAME ANSWER BECAUSE 12,10 WILL BE RIGHT OF 1*/ 
         for(int i=2*n-1;i>=0;i--)
         {
             while(!s.empty() && s.top()<=nums[i%n])
             {
                    s.pop();
             }
             
             if(s.empty())
             {
                 ans[i%n]=-1;
             }
             else
             {
                 ans[i%n]=s.top();
             }
             s.push(nums[i%n]);
        }
        
        return ans;
    }
};