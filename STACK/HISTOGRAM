Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104

**************************************************************************************************************************************

  int largestRectangleArea(vector<int>& h) 
    {

        /*
    //the building will stop expanding on the left and right when the height of next adjacent building is smaller than the current building 
    //thus for every index find the next smaller height on left & right
    
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        vector<int>left(n,0);
        vector<int>right(n,0);
        stack<int>st;
        for(int i=0;i<n;i++){
                while(!st.empty() && heights[st.top()]>=heights[i])
                    st.pop();
                if(st.empty())//no smaller on the left 
                    left[i]=-1;
                else
                    left[i]=st.top();
            st.push(i);
    }  
        stack<int>stk;
        for(int i=n-1;i>=0;i--){
                while(!stk.empty() && heights[i]<=heights[stk.top()])
                    stk.pop();
                if(stk.empty())//no smaller on the left 
                    right[i]=n;
                else
                    right[i]=stk.top();
            stk.push(i);
        }
        int maxArea=0;
        for(int i=0;i<n;i++){
            //cout<<((right[i]-left[i])-1)*heights[i]<<" ";
            maxArea=max(maxArea,((right[i]-left[i])-1)*heights[i]);
        }
        return maxArea;
        
    }*/

        int ans=0;
        stack<int>s;
        int i=0;
        int area=0;
        
        for(i=0;i<(int)h.size();i++)
        {
            // if topmost element is lesser than current element then topmost element can contribute further so we will push in stack
            if(!s.empty() && h[s.top()]<h[i])
            {
                s.push(i);
            }
            
            
            // if topmost element is greater greater than current element than those elements which are greater cannot contribute further so we will pop them and alculate the area
            else
            {
                while(!s.empty() && h[s.top()]>h[i])
                {
                    int k=s.top();
                    s.pop();
                    
                    if(s.empty())
                    {
                        area=h[k]*i;
                    }
                    else
                    {
                        area=h[k]*(i-s.top()-1);
                        
                    }
                    
                    ans=max(ans,area);
                }
                s.push(i);
            }
        }
        
        
        //if stack is not empty  case: [1,2,5]
        while(!s.empty())
        {
                    int k=s.top();
                    s.pop();
                    
                    if(s.empty())
                    {
                        area=h[k]*i;
                    }
                    else
                    {
                        area=h[k]*(i-s.top()-1);
                        
                    }
                    
                    ans=max(ans,area);
            
        }
        
        return ans;
    }
};